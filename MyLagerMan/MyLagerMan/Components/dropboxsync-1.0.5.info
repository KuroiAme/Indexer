{"Name":"Dropbox Sync","Id":123,"Alias":"dropboxsync","Description":"The Dropbox Sync API allows you to give your app its own private Dropbox client and leave the syncing to Dropbox.\n\n- Focus on your data. The Sync API handles all the caching, retrying, and file change notifications.\n- Writes are local so changes are immediate. The Sync API syncs to Dropbox behind the scenes.\n- Your app works great even when offline and automatically syncs when it\u0027s back online.\n\n\n## Authenticating with Dropbox\n\nAdd the following lines of code to link a user\u0027s Dropbox account to your\napp:\n\n### In AppDelegate.cs\n\n```csharp\nusing DropBoxSync.iOS;\n...\n\n// Get your own App Key and Secret from https://www.dropbox.com/developers/apps\nconst string DropboxSyncKey = \"YOUR_APP_KEY\";\nconst string DropboxSyncSecret = \"YOUR_APP_SECRET\";\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\t\n\t// The account manager stores all the account info. Create this when your app launches\n\tvar manager = new DBAccountManager (DropboxSyncKey, DropboxSyncSecret);\n\tDBAccountManager.SetSharedManager (manager);\n\n\tvar account = manager.LinkedAccount;\n\tif (account != null) {\n\t\tvar filesystem = new DBFilesystem (account);\n\t\tDBFilesystem.SetSharedFilesystem (filesystem);\n\t}\t\n\n\t// ...\n}\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tvar account = DBAccountManager.SharedManager.HandleOpenURL (url);\n\tif (account != null) {\n\t\tvar filesystem = new DBFilesystem (account);\n\t\tDBFilesystem.SetSharedFilesystem (filesystem);\n\t\tConsole.WriteLine (\"App linked successfully!\");\n\t\treturn true;\n\t} else {\n\t\tConsole.WriteLine (\"App is not linked\");\n\t\treturn false;\n\t}\n}\n\n```\n\n### In Info.plist\n\nYou\u0027ll need to register the url scheme \"db-DropboxSyncKey\" to complete the\nauthentication flow. Double-click on your app\u0027s Info.plist file, select\nthe Advanced Tab, find the URL Types Section, then click Add URL Type\nand set URL Schemes to db-DropboxSyncKey (i.e.\t\"db-aaa111bbb2222\").\n\n### Link the user\n\nOnce you\u0027ve added the code above, you\u0027re ready to link the user\u0027s\nDropbox account from your UI. For example, add this snippet to a UI\nevent handler in one of your controllers:\n\n```csharp\nDBAccountManager.SharedManager.LinkFromController (myController)\n```\n\nThis will show the Dropbox OAuth screen and ask the user to link their\naccount.\n","Version":"1.0.5","Summary":"Give your app its own private Dropbox client and leave the syncing to Dropbox.","QuickStart":"## Authenticating with Dropbox\n\nAdd the following lines of code to link a user\u0027s Dropbox account to your\napp:\n\n### In AppDelegate.cs\n\n```csharp\nusing DropBoxSync.iOS;\n...\n\n// Get your own App Key and Secret from https://www.dropbox.com/developers/apps\nconst string DropboxSyncKey = \"YOUR_APP_KEY\";\nconst string DropboxSyncSecret = \"YOUR_APP_SECRET\";\n\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\t\n\t// The account manager stores all the account info. Create this when your app launches\n\tvar manager = new DBAccountManager (DropboxSyncKey, DropboxSyncSecret);\n\tDBAccountManager.SetSharedManager (manager);\n\n\tvar account = manager.LinkedAccount;\n\tif (account != null) {\n\t\tvar filesystem = new DBFilesystem (account);\n\t\tDBFilesystem.SetSharedFilesystem (filesystem);\n\t}\t\n\n\t// ...\n}\n\npublic override bool OpenUrl (UIApplication application, NSUrl url, string sourceApplication, NSObject annotation)\n{\n\tvar account = DBAccountManager.SharedManager.HandleOpenURL (url);\n\tif (account != null) {\n\t\tvar filesystem = new DBFilesystem (account);\n\t\tDBFilesystem.SetSharedFilesystem (filesystem);\n\t\tConsole.WriteLine (\"App linked successfully!\");\n\t\treturn true;\n\t} else {\n\t\tConsole.WriteLine (\"App is not linked\");\n\t\treturn false;\n\t}\n}\n\n```\n\n### In Info.plist\n\nYou\u0027ll need to register the url scheme \"db-APP_KEY\" to complete the\nauthentication flow. Double-click on your app\u0027s Info.plist file, select\nthe Advanced Tab, find the URL Types Section, then click Add URL Type\nand set URL Schemes to db-APP_KEY (i.e.\t\"db-aaa111bbb2222\").\n\n### Link the user\n\nOnce you\u0027ve added the code above, you\u0027re ready to link the user\u0027s\nDropbox account from your UI. For example, add this snippet to a UI\nevent handler in one of your controllers:\n\n```csharp\nDBAccountManager.SharedManager.LinkFromController (myController)\n```\n\nThis will show the Dropbox OAuth screen and ask the user to link their\naccount.\n\n## Listing folders\n\nOnce you\u0027ve linked your app to a Dropbox account, you may want to list\nthe contents of your app\u0027s exclusive Dropbox folder. If you used the\nsample code above, once you\u0027re authenticated you should have a properly\nauthorized `DBFilesystem` instance stored in\n`DBFilesystem.SharedFilesystem`, which is the object that allows you to\nlist folders; and open, move or delete files.\n\n```csharp\nvoid ListFiles (string path)\n{\n\tDBError error;\n\n\tvar contents = DBFilesystem.SharedFilesystem.ListFolder (path, out error);\n\tforeach (DBFileInfo info in contents) {\n\t\tConsole.WriteLine (info.Path);\n\t}\t\n}\n```\n\nSync API method calls involving file reads are synchronous, meaning they wait until the\nrequested data is available, or until an error occurs and an exception\nis thrown. You should make sure all DBFilesystem and DBFile calls are\ndone from a background thread to keep your UI responsive.\n\n## Working with files\n\nInitially, your app\u0027s folder in your user\u0027s Dropbox won\u0027t contain any\nfiles, so you\u0027ll need to create one:\n\n```csharp\nvoid CreateFile ()\n{\n\tDBError error;\n\n\tvar dbpath = DBPath.Root.ChildPath (\"hello.txt\");\n\tvar file = DBFilesystem.SharedFilesystem.CreateFile (dbpath, out error);\n\tfile.WriteString (\"Hello World!\", out error);\n}\n```\n\nWriting to the file will succeed immediately, and the Sync API will sync\nthe file to Dropbox asynchronously. Even if you are offline, the write\nwill succeed and it will be automatically synced to the server once your\napp comes back online.\n\nReading a file is just as easy: you can call `DBFile.ReadString` to get\na file\u0027s contents as a UTF8 string. If the file is not cached, this\noperation can take a while, so always call this method on a background\nthread.\n\n## Watching for changes\n\nMany objects in the Sync API allow you to register a callback\nthat will get called when something about a file changes. Here\u0027s an\nexample of how to find out when a file has changed:\n\n```csharp\nvoid CreateAndWatchFile ()\n{\n\t// First, create a file to change for demo purposes.\n\tDBError err; \n\tDBPath path = DBPath.Root.ChildPath (\"change-me.txt\");\n\tDBFile file = DBFilesystem.SharedFilesystem.CreateFile (path, out err);\n\n\t// Next, register for changes on that file.\n\tfile.AddObserver (this, () =\u003e {\n\t\t\tDBFileStatus status = file.NewerStatus;\n\n\t\t\t// If file.NewerStatus is null, the file hasn\u0027t changed.\n\t\t\tif (status == null) return;\n\n\t\t\tif (status.Cached) {\n\t\t\t\tDBError error;\n\t\t\t\tfile.Update (out error);\n\t\t\t\tConsole.WriteLine (\"The updated file has finished downloading\");\n\t\t\t} else {\n\t\t\t\tConsole.WriteLine (\"The file is still downloading\");\n\t\t\t}\n\t});\n}\n```\n\nIn the example above, every time you edit \"change-me.txt\" in your app\u0027s\nDropbox folder, the callback will print to the console when the file\nstarts downloading,\nand print again when it finishes downloading.\n\nTo stop listening for updates:\n\n```csharp\nfile.RemoveObserver (this);\n```\n\n## Documentation\n\nTo explore the full Dropbox Sync API, check out our [iOS SDK documentation](https://www.dropbox.com/developers/sync/docs/ios).\n","Hash":"d220ed91c32d06a8d71fb2ecc5549640","TargetPlatforms":["ios"],"TrialHash":null}